#!/usr/bin/env bash

# Check dependencies
if ! command -v system_profiler >/dev/null 2>&1; then
  echo "#[fg=red]system_profiler not found" >&2
  exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
  echo "#[fg=red]jq not found; brew install jq" >&2
  exit 1
fi

# Retrieve JSON data
json=$(system_profiler -json SPAirPortDataType -detailLevel basic 2>/dev/null)
if [[ -z "$json" ]]; then
  echo "#[fg=red]offline"
  exit 1
fi

# Detect active interface
iface=$(jq -r '
  .SPAirPortDataType[0]
  .spairport_airport_interfaces[]
  | select(.spairport_current_network_information._name != null)
  | ._name
' <<<"$json" | head -n1)

if [[ -z "$iface" ]]; then
  echo "#[fg=red]offline"
  exit 1
fi

# Extract SSID, RSSI, and transmit rate
ssid=$(jq -r --arg IF "$iface" '
  .SPAirPortDataType[0]
  .spairport_airport_interfaces[]
  | select(._name == $IF)
  | .spairport_current_network_information._name
' <<<"$json")

rssi=$(jq -r --arg IF "$iface" '
  .SPAirPortDataType[0]
  .spairport_airport_interfaces[]
  | select(._name == $IF)
  | .spairport_current_network_information.spairport_signal_noise
' <<<"$json" | awk '{print $1}')

rate=$(jq -r --arg IF "$iface" '
  .SPAirPortDataType[0]
  .spairport_airport_interfaces[]
  | select(._name == $IF)
  | .spairport_current_network_information.spairport_network_rate
' <<<"$json")

# Build signal strength blocks
signals=(▂▅▇)
signal=""
for idx in "${!signals[@]}"; do
  threshold=$(( idx==0 ? -100 : idx==1 ? -80 : -50 ))
  if (( rssi > threshold )); then
    signal+="${signals[idx]}"
  fi
done

# Handle no connection
if (( rate == 0 )); then
  echo "#[fg=red]no_wifi"
  exit 1
fi

# Output formatted for tmux status-right
echo "#[fg=white]${ssid} #[fg=green]${rate}Mbps ${signal}"

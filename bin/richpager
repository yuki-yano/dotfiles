#!/bin/bash
#
# @(#) richpager v0.0.1 2015-08-05
#
# Usage:
#   richpager [-p|-n|-l|-s] file...
#
# Description:
#   richpager is a pager such like less and cat with pygmentize
#
######################################################################


set -e

# Function to check whether a certain command
# exists in the environment variable $PATH
# Return zero(true) if present
has()
{
    [[ -n $1 ]] || return 1
    type "$1" >/dev/null 2>&1
    return $?
}

argc=0
existent_files=()
non_existent_files=()

if has 'python'; then
    # Getting a list of available styles
    #
    # Because it could be that a plugin registered a style,
    # there is a way to iterate over all styles:
    #
    get_styles="from pygments.styles import get_all_styles
    styles = list(get_all_styles())
    print('\n'.join(styles))"
    # See also <http://pygments.org/docs/styles/>

    # Getting a list of styles for shell script
    # 'sed -e ...' indent the beginning of a line space for Python
    styles=( $(echo "$get_styles" | sed -e 's/^  *//g' | python) )
fi
style='default'

highlighter='cat'
if has 'pygmentize'; then
    highlighter="pygmentize -O style=$style -f console256 -g 2>/dev/null"
fi
m_option=''

args()
{
    # Err
    # With no argument, return false
    if [[ -z $1 ]]; then
        echo "error: too few argument" 1>&2
        return 1
    fi

    # In bash, this functions is the simplest way to test
    # if an array($styles) contains a certain value.
    # In case of this script,
    # check if $styles array contains a certain($1) value
    in_array()
    {
        local e
        for e in "${styles[@]}"
        do
            [[ "$e" == "$1" ]] && return 0
        done
        return 1
    }

    #
    # Before changing
    #
    # Set default color scheme
    # use solarized if exists
    if in_array 'solarized'; then
        style='solarized'
        highlighter="pygmentize -O style=$style -f console256 -g 2>/dev/null"
    fi
    local n_flag=''
    local l_flag='-F'

    #
    # Do changing
    #
    while (($# > 0))
    do
        case "$1" in
            -*)
                # help option:
                if [[ "$1" =~ h ]]; then
                    echo "usage: richpager [-h][-nlp][-a] file..."
                    echo "  -h       Show this help"
                    echo "  -n       Number the output lines, starting at 1"
                    echo "  -l       Use less nevertheless linage"
                    echo "  -p       Use plane text without pygmentize"
                    echo "  -s style Specify the style for highlighting"
                    echo "  -m       Display multiple files in multiple buffer"
                    return 0
                fi

                # -p switch:
                # Plain test
                # Do not do syntax highlighting
                if [[ "$1" =~ p ]]; then
                    LESSOPEN=''
                    highlighter='cat'
                fi

                # -n switch:
                # Outputs with line number, starting at 1
                if [[ "$1" =~ n ]]; then
                    n_flag='-N'
                fi

                # -l switch:
                # Use less unlike cat-like output
                if [[ "$1" =~ l ]]; then
                    l_flag=''
                fi

                # -m flag:
                # When is is possible to use the pygmentize,
                # to specify a color scheme for syntax highlighting
                # If no argument is given,
                # list all available color schemes
                # e.g. $0 -s [style]
                #      -s       -> list color schemes
                #      -s style -> use style as a color scheme if available
                if [[ "$1" =~ s ]]; then
                    if ! has 'python'; then
                        echo "error: Can not get the list of style for the highlight" 1>&2
                        return 1
                    fi

                    shift
                    if [[ -z $1 ]]; then
                        # If no arguments are given,
                        # list all available styles
                        local s
                        for s in "${styles[@]}"
                        do
                            echo "$s"
                        done
                        return 1
                    else
                        # Set a style if the styles array contains a style specified by the user
                        if has 'pygmentize'; then
                            if in_array "$1"; then
                                style="$1"
                            fi
                            highlighter="pygmentize -O style=$style -f console256 -g 2>/dev/null"
                        else
                            echo "error: This -s option needs Pygments" 1>&2
                            return 1
                        fi
                    fi
                fi

                # -m switch:
                # If the file given as the argument is more,
                # does not concatenate the text of the file,
                # such as the cat command
                if [[ "$1" =~ m ]]; then
                    m_option=1
                fi

                # shift the switch and flags
                # In the case of options that take an argument(that is flag),
                # shift in the if statement to perform the argument processing
                # e.g. -s option
                shift
                ;;
            *)
                # Describe later error raised for a file that does not exist
                if [[ -f $1 ]]; then
                    existent_files=("${existent_files[@]}" "$1")
                else
                    non_existent_files=("${non_existent_files[@]}" "$1")
                fi
                shift
                ;;
        esac
    done

    #
    # After changing
    #
    argc="${#existent_files[@]}"
    LESSOPEN="| ${highlighter} %s"
    export LESSOPEN

    local prompt=' -P ?f%f:(stdin). ?lb%lb?L/%L.. [?eEOF:?pb%pb\%:%B..]'
    LESS="-R -i -f -X $l_flag $n_flag $prompt"
    export LESS
}

main()
{
    # Analyze the arguments
    args "$@" || return 1

    if [ -p /dev/stdin ]; then
        # Put a color to the standard input
        eval "${highlighter}" | less
    else
        if ((argc == 1)); then
            # When invoked with exactly one argument,
            # do not read the standard input;
            # interpret the argument as a file that has been given to the less
            less "${existent_files[0]}"
        else
            # If there are multiple arguments,
            # run for loop or less -e
            # to adapting the syntax highlighting to all files
            if [[ $m_option -eq 1 ]]; then
                less -eM "${existent_files[@]}"
            else
                local f
                for f in "${existent_files[@]}"
                do
                    eval "${highlighter} $f &"
                done | less
            fi
        fi
    fi

    # If a file that does not exist is given,
    # raised error
    local file error 
    for file in "${non_existent_files[@]}"
    do
        error=1
        echo "error: $file: no such file or directory" 1>&2
    done

    if [[ "$error" == 1 ]]; then
        return 1
    fi
}

main "$@"

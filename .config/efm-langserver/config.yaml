---
version: 2

tools:
  go-golangci-lint: &go-golangci-lint
    lint-command: "golangci-lint run"

  rubocop-lint: &rubocop-lint
    lint-command: "bundle exec rubocop --format emacs --force-exclusion --stdin ${INPUT}"
    lint-ignore-exit-code: true
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %m"
    root-markers:
      - Gemfile
      - .rubocop.yml

  vint-lint: &vint-lint
    lint-command: "vint --enable-neovim --style-problem --stdin-display-name ${INPUT} -"
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %m"

  shellcheck-lint: &shellcheck-lint
    lint-command: "shellcheck -s bash -f gcc -x -"
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %trror: %m"
      - "%f:%l:%c: %tarning: %m"
      - "%f:%l:%c: %tote: %m"

  shfmt-format: &shfmt-format
    format-command: "shfmt -ln bash -kp"
    format-stdin: true

  textlint-lint: &textlint-lint
    lint-command: "yarn run textlint --format unix --stdin --stdin-filename ${INPUT}"
    lint-ignore-exit-code: true
    lint-stdin: true
    lint-formats:
      - "%f:%l:%c: %m [%trror/%r]"
      - "%f:%l:%c: 【%r】 %m"
      - "%E%f:%l:%c: %m"
      - "%Z%m [%trror/%r]"
      - "%C%m"
    root-markers:
      - .textlintrc

  jsonlint-lint: &jsonlint-lint
    lint-command: 'jsonlint -c'
    lint-stdin: true
    lint-formats:
      - 'line %l, col %c, found: %m'

languages:
  go:
    - <<: *go-golangci-lint

  ruby:
    - <<: *rubocop-lint

  vim:
    - <<: *vint-lint

  sh:
    - <<: *shellcheck-lint
    - <<: *shfmt-format

  zsh:
    - <<: *shellcheck-lint

  markdown:
    - <<: *textlint-lint

  json:
    - <<: *jsonlint-lint

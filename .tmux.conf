# Default
set -g prefix C-y
bind -T prefix C-y send-keys C-y

set  -g default-terminal "tmux-256color"
set -ga terminal-overrides ",$TERM:Tc"
set -sg escape-time 0
set  -g history-limit 10000
set  -g status-interval 10

set  -g base-index 1
set  -g pane-base-index 1
set  -g status-position top
setw -g mode-keys vi
set  -g mouse on
set  -g default-command "reattach-to-user-namespace -l $SHELL"
set  -g focus-events on

# Reload
bind R source-file ~/.tmux.conf \; display "Reloaded!"

# Binding

## Move Pane
# Standard pane movement (fallback)
bind -T prefix h select-pane -L
bind -T prefix j select-pane -D
bind -T prefix k select-pane -U
bind -T prefix l select-pane -R

## Move Window
bind -T prefix c   new-window
bind -n M-c        new-window -c "#{pane_current_path}"
bind -T prefix n   next-window
bind -T prefix p   previous-window
bind -n M-j        next-window
bind -n M-k        previous-window

## Split Window
bind -T prefix v split-window -h  -c "#{pane_current_path}"
bind -T prefix s split-window -v  -c "#{pane_current_path}"
bind -n M-v      split-window -h  -c "#{pane_current_path}"
bind -n M-s      split-window -v  -c "#{pane_current_path}"
bind -T prefix V split-window -fh -c "#{pane_current_path}"
bind -T prefix S split-window -fv -c "#{pane_current_path}"
bind -T prefix 3 split-window -h  -c "#{pane_current_path}" -l 66%
bind -T prefix 4 split-window -h  -c "#{pane_current_path}" -l 75%

## Resize Pane
bind -r -T prefix H resize-pane -L 5
bind -r -T prefix L resize-pane -R 5
bind -r -T prefix J resize-pane -D 5
bind -r -T prefix K resize-pane -U 5
bind -n M-Left  resize-pane -L 2
bind -n M-Right resize-pane -R 2
bind -n M-Down  resize-pane -D 2
bind -n M-Up    resize-pane -U 2

## Swap Panes
# Toggle mark/swap functionality
bind-key m run-shell 'tmux-swap-pane'

## Clear History
bind -T prefix C-c clear-history

## Move Session
bind -n M-C new-session -c '~/'
bind -n M-l switch-client -n
bind -n M-h switch-client -p

## Rename Window & Session
bind -n M-R command-prompt -p "(rename-session '#S')" "rename-session '%%'"

## Move Selection
bind -T prefix a   choose-tree
bind -T prefix e   choose-session
bind -T prefix w   choose-tree -w
bind -T prefix C-a choose-tree
bind -T prefix C-e choose-session
bind -T prefix C-w choose-tree -w

## Copy Mode
bind -n M-'[' copy-mode

bind -T copy-mode-vi C-a    send-keys -X start-of-line
bind -T copy-mode-vi C-e    send-keys -X end-of-line
bind -T copy-mode-vi v      send-keys -X begin-selection
bind -T copy-mode-vi V      send-keys -X select-line
bind -T copy-mode-vi C-v    send-keys -X rectangle-toggle
bind -T copy-mode-vi y      send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind -T copy-mode-vi Enter  send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind -T copy-mode-vi Escape send-keys -X cancel

bind -n M-']' run "reattach-to-user-namespace pbpaste | tr -d '\n' | tmux load-buffer - && tmux paste-buffer"
bind -n M-'}' run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"
bind -T prefix ] run "reattach-to-user-namespace pbpaste | tr -d '\n' | tmux load-buffer - && tmux paste-buffer"
bind -T prefix '}' run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

# tmux.nvim integration
is_zsh="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE 'Ss\\+\\s*-zsh$'"
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE 'S\\+\\s*?g?(view|n?vim?x?)(diff)?$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE 'S\\+\\s*fzf$'"
is_claude="ps -o comm= -t '#{pane_tty}' | grep -qE '(claude|node.*claude)'"

# bind -n C-h if-shell "$is_vim" 'send-keys C-h' {
#   if-shell "$is_claude" {
#     if-shell '
#       tmux capture-pane -p -e | grep -E "│.*>.*│" | tail -1 | perl -ne '\''
#         if (/│[^>]*>\s*(.*)│/) {
#           $full_content = $1;
#           $full_content =~ s/\s*\x1b\[2m\x1b\[38;2;.*$//;
#
#           $text = $full_content;
#           $text =~ s/\x1b\[[0-9;]*m//g;
#           $text =~ s/\s+$//;
#
#           if ($text eq "" || $full_content =~ /^[\s\xc2\xa0]*\x1b\[(2|7)m/) {
#             exit 0;
#           } else {
#             exit 1;
#           }
#         } else {
#           exit 1;
#         }
#       '\''
#     ' {
#       if -F '#{pane_at_left}' 'run-shell "tmux-smart-switch-pane left"' 'run-shell "tmux-smart-switch-pane left"'
#     } 'send-keys C-h'
#   } {
#     if-shell "$is_zsh || $is_fzf" 'send-keys C-h' { 
#       if -F '#{pane_at_left}' '' 'run-shell "tmux-smart-switch-pane left"' 
#     }
#   }
# }

bind -n C-h if-shell "$is_vim" 'send-keys C-h' {
  if-shell "$is_claude" 'run-shell "tmux-smart-switch-pane left"' {
    if-shell "$is_zsh || $is_fzf" 'send-keys C-h' { 
      if -F '#{pane_at_left}' '' 'run-shell "tmux-smart-switch-pane left"' 
    }
  }
}

bind -n C-j if-shell "$is_vim" 'send-keys C-j' {
  if-shell "$is_claude" 'run-shell "tmux-smart-switch-pane down"' {
    if-shell "$is_zsh || $is_fzf" 'send-keys C-j' { 
      if -F '#{pane_at_bottom}' '' 'run-shell "tmux-smart-switch-pane down"' 
    }
  }
}

bind -n C-k if-shell "$is_vim" 'send-keys C-k' {
  if-shell "$is_claude" 'run-shell "tmux-smart-switch-pane up"' {
    if-shell "$is_zsh || $is_fzf" 'send-keys C-k' { 
      if -F '#{pane_at_top}' '' 'run-shell "tmux-smart-switch-pane up"' 
    }
  }
}

bind -n C-l if-shell "$is_vim" 'send-keys C-l' {
  if-shell "$is_claude" 'run-shell "tmux-smart-switch-pane right"' {
    if-shell "$is_fzf" 'send-keys C-l' 'run-shell "tmux-smart-switch-pane right"'
  }
}

bind -n M-i run-shell 'tmux split-window -v -l 20 -c "#{pane_current_path}" "editprompt --target-pane #{pane_id}"'

bind -T copy-mode-vi C-h if -F '#{pane_at_left}'   '' 'select-pane -L'
bind -T copy-mode-vi C-j if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind -T copy-mode-vi C-k if -F '#{pane_at_top}'    '' 'select-pane -U'
bind -T copy-mode-vi C-l if -F '#{pane_at_right}'  '' 'select-pane -R'

bind -T prefix C-l send-keys C-l
bind -n C-s        if-shell "$is_zsh" 'send-keys C-l' 'send-keys C-s'

bind -n M-d detach-client

# Status Line
set -g status-fg "#c6c6c6"
set -g status-bg "#3a3a3a"

set -g pane-border-style fg="#404040"
set -g pane-active-border-style fg="#585B70"

# Window style (background colors)
set -g window-style 'bg=#232333'
set -g window-active-style 'bg=#181825'

set -g pane-border-lines heavy

set -g status-left-length  150
set -g status-right-length 150
set -g status-left "#[fg=#1c1c1c,bg=blue] #(tmux-statusline-sessions) #[fg=blue,bg=#3a3a3a]"

setw -g window-status-current-format "#[fg=#3a3a3a,bg=#1c1c1c]#[fg=white,bg=#1c1c1c,bold]#I #W#[fg=#1c1c1c,bg=#3a3a3a]"
setw -g window-status-format " #[fg=#5f87d7,bg=#3a3a3a]#I #W "

set -g status-right '#[fg=#303030,bg=#3a3a3a]#[fg=white,bg=#303030] #(tmux-status-ccusage) #[fg=#404040,bg=#303030]#[fg=white,bg=#404040]#(tmux-git-branch "#{pane_current_path}") #[fg=#45475A,bg=#404040]#[fg=white,bg=black] #(wifi) #[fg=white,bg=black]#(battery) '
set -g status-justify left

set-option -g pane-border-status bottom
set-option -g pane-border-format "#{?pane_active,#[fg=#1c1c1c]#[bg=#89B4FA],#[fg=#1c1c1c]#[bg=#313244]}#{?pane_active,#[bg=#313244]#[bg=#89B4FA],#[fg=#6C7086]#[bg=#313244]} #I.#P: #(tmux-pwd #{pane_current_path})  #{pane_current_command} #{?pane_active,#[fg=#89B4FA]#[bg=#1c1c1c],#[fg=#313244]#[bg=#1c1c1c]}"

if "test -e ~/.tmux.conf.local" "source ~/.tmux.conf.local"

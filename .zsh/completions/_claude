#compdef claude

# Claude Code zsh completion

_claude() {
  local -a _claude_commands
  _claude_commands=(
    'config:Manage configuration (eg. claude config set -g theme dark)'
    'mcp:Configure and manage MCP servers'
    'migrate-installer:Migrate from global npm installation to local installation'
    'doctor:Check the health of your Claude Code auto-updater'
    'update:Check for updates and install if available'
    'install:Install Claude Code native build'
  )

  local -a _claude_options
  _claude_options=(
    {-d,--debug}'[Enable debug mode]'
    '--verbose[Override verbose mode setting from config]'
    {-p,--print}'[Print response and exit (useful for pipes)]'
    '--output-format[Output format (only works with --print)]:format:(text json stream-json)'
    '--input-format[Input format (only works with --print)]:format:(text stream-json)'
    '--mcp-debug[Enable MCP debug mode (shows MCP server errors) - DEPRECATED]'
    '--dangerously-skip-permissions[Bypass all permission checks]'
    '--allowedTools[Comma or space-separated list of tool names to allow]:tools:'
    '--disallowedTools[Comma or space-separated list of tool names to deny]:tools:'
    '--mcp-config[Load MCP servers from a JSON file or string]:file or string:_files'
    {-c,--continue}'[Continue the most recent conversation]'
    {-r,--resume}'[Resume a conversation - provide a session ID or interactively select]:session id:'
    '--model[Model for the current session]:model:(sonnet opus haiku claude-3-5-sonnet-20241022 claude-3-5-haiku-20241022 claude-3-opus-20240229)'
    '--fallback-model[Enable automatic fallback to specified model when default model is overloaded]:model:(sonnet opus haiku claude-3-5-sonnet-20241022 claude-3-5-haiku-20241022 claude-3-opus-20240229)'
    '--add-dir[Additional directories to allow tool access to]:directories:_directories'
    {-v,--version}'[Output the version number]'
    {-h,--help}'[Display help]'
  )

  # Handle subcommands
  if (( CURRENT == 2 )); then
    _describe -t commands 'claude commands' _claude_commands
    _arguments $_claude_options
  else
    case $words[2] in
      config)
        _claude_config
        ;;
      mcp)
        _claude_mcp
        ;;
      install)
        _arguments \
          '--force[Force reinstall even if already installed]' \
          {-h,--help}'[Display help for command]'
        ;;
      update|doctor|migrate-installer)
        _arguments \
          {-h,--help}'[Display help for command]'
        ;;
      *)
        _arguments $_claude_options
        ;;
    esac
  fi
}

_claude_config() {
  local -a _config_commands
  _config_commands=(
    'set:Set a configuration value'
    'get:Get a configuration value'
    'list:List all configuration values (alias: ls)'
    'ls:List all configuration values (alias for list)'
    'add:Add items to a config array (space or comma separated)'
    'remove:Remove a config value or items from a config array (alias: rm)'
    'rm:Remove a config value or items from a config array (alias for remove)'
  )

  if (( CURRENT == 3 )); then
    _describe -t commands 'config commands' _config_commands
  else
    case $words[3] in
      set)
        if (( CURRENT == 4 )); then
          _arguments \
            {-g,--global}'[Use global config]' \
            {-h,--help}'[Display help for command]'
        elif (( CURRENT == 5 )); then
          # Suggest common config keys
          local -a _config_keys
          _config_keys=(
            'theme:UI theme (light or dark)'
            'allowedTools:Allowed tool names'
            'disallowedTools:Disallowed tool names'
            'model:Default model to use'
            'verbose:Enable verbose mode'
          )
          _describe -t keys 'config keys' _config_keys
        fi
        ;;
      get)
        if (( CURRENT == 4 )); then
          _arguments \
            {-g,--global}'[Use global config]' \
            {-h,--help}'[Display help for command]'
        elif (( CURRENT == 5 )); then
          # Suggest common config keys
          local -a _config_keys
          _config_keys=(
            'theme:UI theme (light or dark)'
            'allowedTools:Allowed tool names'
            'disallowedTools:Disallowed tool names'
            'model:Default model to use'
            'verbose:Enable verbose mode'
          )
          _describe -t keys 'config keys' _config_keys
        fi
        ;;
      list|ls)
        _arguments \
          {-g,--global}'[Use global config (default: false)]' \
          {-h,--help}'[Display help for command]'
        ;;
      add)
        _arguments \
          {-g,--global}'[Use global config]' \
          {-h,--help}'[Display help for command]'
        ;;
      remove|rm)
        _arguments \
          {-g,--global}'[Use global config]' \
          {-h,--help}'[Display help for command]'
        ;;
    esac
  fi
}

_claude_mcp() {
  local -a _mcp_commands
  _mcp_commands=(
    'serve:Start the Claude Code MCP server'
    'add:Add an MCP server (stdio transport)'
    'add-json:Add an MCP server (stdio or SSE) with a JSON string'
    'add-from-claude-desktop:Import MCP servers from Claude Desktop (Mac and WSL only)'
    'remove:Remove an MCP server'
    'list:List configured MCP servers'
    'get:Get details about an MCP server'
    'reset-project-choices:Reset all approved and rejected project-scoped (.mcp.json) servers'
  )

  if (( CURRENT == 3 )); then
    _describe -t commands 'mcp commands' _mcp_commands
  else
    case $words[3] in
      serve)
        _arguments \
          {-d,--debug}'[Enable debug mode]' \
          '--verbose[Override verbose mode setting from config]' \
          {-h,--help}'[Display help for command]'
        ;;
      add)
        _arguments \
          {-s,--scope}'[Configuration scope]:scope:(local user project)' \
          {-t,--transport}'[Transport type]:transport:(stdio sse http)' \
          {-e,--env}'[Set environment variables (e.g. -e KEY=value)]:env:' \
          {-H,--header}'[Set HTTP headers for SSE and HTTP transports]:header:' \
          {-h,--help}'[Display help for command]'
        ;;
      add-json)
        _arguments \
          {-s,--scope}'[Configuration scope]:scope:(local user project)' \
          {-h,--help}'[Display help for command]'
        ;;
      add-from-claude-desktop)
        _arguments \
          {-s,--scope}'[Configuration scope]:scope:(local user project)' \
          {-h,--help}'[Display help for command]'
        ;;
      remove)
        _arguments \
          {-s,--scope}'[Configuration scope]:scope:(local user project)' \
          {-h,--help}'[Display help for command]'
        ;;
      get|list|reset-project-choices)
        _arguments \
          {-h,--help}'[Display help for command]'
        ;;
    esac
  fi
}

_claude "$@"
#compdef youtube-dl

# zsh completions for 'youtube-dl'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  {-h,--help}'[print this help text and exit]'
  '--version[print program version and exit]'
  {-U,--update}'[update this program to latest version. Make sure that you have sufficient permissions (run with sudo if needed)]'
  {-i,--ignore-errors}'[continue on download errors, for example to skip unavailable videos in a playlist]'
  '--abort-on-error[abort downloading of further videos (in the playlist or the command line) if an error occurs]'
  '--dump-user-agent[display the current browser identification]'
  '--list-extractors[list all supported extractors]'
  '--extractor-descriptions[output descriptions of all supported extractors]'
  '--force-generic-extractor[force extraction to use the generic extractor]'
  '--default-search[use this prefix for unqualified URLs. For example "gvsearch2:" downloads two videos from google videos for youtube-dl]'
  '--ignore-config[do not read configuration files. When given in the global configuration file /etc/youtube-dl.conf: Do not read the user]'
  '--config-location[location of the configuration file; either the path to the config or its containing directory.]'
  '--flat-playlist[do not extract the videos of a playlist, only list them.]'
  '--mark-watched[mark videos watched (YouTube only)]'
  '--no-mark-watched[do not mark videos watched (YouTube only)]'
  '--no-color[do not emit color codes in output]'
  '--proxy[use the specified HTTP/HTTPS/SOCKS proxy. To enable SOCKS proxy, specify a proper scheme. For example]'
  '--socket-timeout[time to wait before giving up, in seconds]'
  '--source-address[client-side IP address to bind to]'
  {-4,--force-ipv4}'[make all connections via IPv4]'
  {-6,--force-ipv6}'[make all connections via IPv6]'
  '--geo-verification-proxy[use this proxy to verify the IP address for some geo-restricted sites. The default proxy specified by --proxy (or none, if]'
  '--geo-bypass[bypass geographic restriction via faking X-Forwarded-For HTTP header]'
  '--no-geo-bypass[do not bypass geographic restriction via faking X-Forwarded-For HTTP header]'
  '--geo-bypass-country[force bypass geographic restriction with explicitly provided two-letter ISO 3166-2 country code]'
  '--geo-bypass-ip-block[force bypass geographic restriction with explicitly provided IP block in CIDR notation]'
  '--playlist-start[playlist video to start at (default is 1)]'
  '--playlist-end[playlist video to end at (default is last)]'
  '--playlist-items[playlist video items to download. Specify indices of the videos in the playlist separated by commas like: "--playlist-]'
  '--match-title[download only matching titles (regex or caseless sub-string)]'
  '--reject-title[skip download for matching titles (regex or caseless sub-string)]'
  '--max-downloads[abort after downloading NUMBER files]'
  '--min-filesize[do not download any videos smaller than SIZE (e.g. 50k or 44.6m)]'
  '--max-filesize[do not download any videos larger than SIZE (e.g. 50k or 44.6m)]'
  '--date[download only videos uploaded in this date]'
  '--datebefore[download only videos uploaded on or before this date (i.e. inclusive)]'
  '--dateafter[download only videos uploaded on or after this date (i.e. inclusive)]'
  '--min-views[do not download any videos with less than COUNT views]'
  '--max-views[do not download any videos with more than COUNT views]'
  '--match-filter[generic video filter. Specify any key (see the "OUTPUT TEMPLATE" for a list of available keys) to match if the key is]'
  '--match-filter[> 100 & dislike_count <? 50 & description" .]'
  '--no-playlist[download only the video, if the URL refers to a video and a playlist.]'
  '--yes-playlist[download the playlist, if the URL refers to a video and a playlist.]'
  '--age-limit[download only videos suitable for the given age]'
  '--download-archive[download only videos not listed in the archive file. Record the IDs of all downloaded videos in it.]'
  '--include-ads[download advertisements as well (experimental)]'
  {-r,--limit-rate}'[maximum download rate in bytes per second (e.g. 50K or 4.2M)]'
  {-R,--retries}'[number of retries (default is 10), or "infinite".]'
  '--fragment-retries[number of retries for a fragment (default is 10), or "infinite" (DASH, hlsnative and ISM)]'
  '--skip-unavailable-fragments[skip unavailable fragments (DASH, hlsnative and ISM)]'
  '--abort-on-unavailable-fragment[abort downloading when some fragment is not available]'
  '--keep-fragments[keep downloaded fragments on disk after downloading is finished; fragments are erased by default]'
  '--buffer-size[size of download buffer (e.g. 1024 or 16K) (default is 1024)]'
  '--no-resize-buffer[do not automatically adjust the buffer size. By default, the buffer size is automatically resized from an initial value of]'
  '--http-chunk-size[size of a chunk for chunk-based HTTP downloading (e.g. 10485760 or 10M) (default is disabled). May be useful for bypassing]'
  '--playlist-reverse[download playlist videos in reverse order]'
  '--playlist-random[download playlist videos in random order]'
  '--xattr-set-filesize[set file xattribute ytdl.filesize with expected file size]'
  '--hls-prefer-native[use the native HLS downloader instead of ffmpeg]'
  '--hls-prefer-ffmpeg[use ffmpeg instead of the native HLS downloader]'
  '--hls-use-mpegts[use the mpegts container for HLS videos, allowing to play the video while downloading (some players may not be able to]'
  '--external-downloader[use the specified external downloader. Currently supports aria2c,avconv,axel,curl,ffmpeg,httpie,wget]'
  '--external-downloader-args[give these arguments to the external downloader]'
  {-a,--batch-file}'[file containing URLs to download (- for stdin), one URL per line. Lines starting with #, ; or \] are considered as]'
  '--id[use only video ID in file name]'
  {-o,--output}'[output filename template, see the "OUTPUT TEMPLATE" for all the info]'
  '--autonumber-start[specify the start value for %(autonumber)s (default is 1)]'
  '--restrict-filenames[restrict filenames to only ASCII characters, and avoid "&" and spaces in filenames]'
  {-w,--no-overwrites}'[do not overwrite files]'
  {-c,--continue}'[force resume of partially downloaded files. By default, youtube-dl will resume downloads if possible.]'
  '--no-continue[do not resume partially downloaded files (restart from beginning)]'
  '--no-part[do not use .part files - write directly into output file]'
  '--no-mtime[do not use the Last-modified header to set the file modification time]'
  '--write-description[write video description to a .description file]'
  '--write-info-json[write video metadata to a .info.json file]'
  '--write-annotations[write video annotations to a .annotations.xml file]'
  '--load-info-json[JSON file containing the video information (created with the "--write-info-json" option)]'
  '--cookies[file to read cookies from and dump cookie jar in]'
  '--cache-dir[location in the filesystem where youtube-dl can store some downloaded information permanently. By default $XDG_CACHE_HOME]'
  '--no-cache-dir[disable filesystem caching]'
  '--rm-cache-dir[delete all filesystem cache files]'
  '--write-thumbnail[write thumbnail image to disk]'
  '--write-all-thumbnails[write all thumbnail image formats to disk]'
  '--list-thumbnails[simulate and list all available thumbnail formats]'
  {-q,--quiet}'[activate quiet mode]'
  '--no-warnings[ignore warnings]'
  {-s,--simulate}'[do not download the video and do not write anything to disk]'
  '--skip-download[do not download the video]'
  {-g,--get-url}'[simulate, quiet but print URL]'
  {-e,--get-title}'[simulate, quiet but print title]'
  '--get-id[simulate, quiet but print id]'
  '--get-thumbnail[simulate, quiet but print thumbnail URL]'
  '--get-description[simulate, quiet but print video description]'
  '--get-duration[simulate, quiet but print video length]'
  '--get-filename[simulate, quiet but print output filename]'
  '--get-format[simulate, quiet but print output format]'
  {-j,--dump-json}'[simulate, quiet but print JSON information. See the "OUTPUT TEMPLATE" for a description of available keys.]'
  {-J,--dump-single-json}'[simulate, quiet but print JSON information for each command-line argument. If the URL refers to a playlist, dump the whole]'
  '--print-json[be quiet and print the video information as JSON (video is still being downloaded).]'
  '--newline[output progress bar as new lines]'
  '--no-progress[do not print progress bar]'
  '--console-title[display progress in console titlebar]'
  {-v,--verbose}'[print various debugging information]'
  '--dump-pages[print downloaded pages encoded using base64 to debug problems (very verbose)]'
  '--write-pages[write downloaded intermediary pages to files in the current directory to debug problems]'
  '--print-traffic[display sent and read HTTP traffic]'
  {-C,--call-home}'[contact the youtube-dl server for debugging]'
  '--no-call-home[do NOT contact the youtube-dl server for debugging]'
  '--encoding[force the specified encoding (experimental)]'
  '--no-check-certificate[suppress HTTPS certificate validation]'
  '--prefer-insecure[use an unencrypted connection to retrieve information about the video. (Currently supported only for YouTube)]'
  '--user-agent[specify a custom user agent]'
  '--referer[specify a custom referer, use if the video access is restricted to one domain]'
  '--add-header[specify a custom HTTP header and its value, separated by a colon :. You can use this option multiple times]'
  '--bidi-workaround[work around terminals that lack bidirectional text support. Requires bidiv or fribidi executable in PATH]'
  '--sleep-interval[number of seconds to sleep before each download when used alone or a lower bound of a range for randomized sleep before]'
  '--max-sleep-interval[upper bound of a range for randomized sleep before each download (maximum possible number of seconds to sleep). Must only]'
  {-f,--format}'[video format code, see the "FORMAT SELECTION" for all the info]'
  '--all-formats[download all available video formats]'
  '--prefer-free-formats[prefer free video formats unless a specific one is requested]'
  {-F,--list-formats}'[list all available formats of requested videos]'
  '--youtube-skip-dash-manifest[do not download the DASH manifests and related data on YouTube videos]'
  '--merge-output-format[if a merge is required (e.g. bestvideo+bestaudio), output to given container format. One of mkv, mp4, ogg, webm, flv.]'
  '--write-sub[write subtitle file]'
  '--write-auto-sub[write automatically generated subtitle file (YouTube only)]'
  '--all-subs[download all the available subtitles of the video]'
  '--list-subs[list all available subtitles for the video]'
  '--sub-format[subtitle format, accepts formats preference, for example: "srt" or "ass/srt/best"]'
  '--sub-lang[languages of the subtitles to download (optional) separated by commas, use --list-subs for available language tags]'
  {-u,--username}'[login with this account ID]'
  {-p,--password}'[account password. If this option is left out, youtube-dl will ask interactively.]'
  {-2,--twofactor}'[two-factor authentication code]'
  {-n,--netrc}'[use .netrc authentication data]'
  '--video-password[video password (vimeo, smotri, youku)]'
  '--ap-mso[adobe Pass multiple-system operator (TV provider) identifier, use --ap-list-mso for a list of available MSOs]'
  '--ap-username[multiple-system operator account login]'
  '--ap-password[multiple-system operator account password. If this option is left out, youtube-dl will ask interactively.]'
  '--ap-list-mso[list all supported multiple-system operators]'
  {-x,--extract-audio}'[convert video files to audio-only files (requires ffmpeg or avconv and ffprobe or avprobe)]'
  '--audio-format[specify audio format: "best", "aac", "flac", "mp3", "m4a", "opus", "vorbis", or "wav"; "best" by default; No effect]'
  '--audio-quality[specify ffmpeg/avconv audio quality, insert a value between 0 (better) and 9 (worse) for VBR or a specific bitrate like]'
  '--recode-video[encode the video to another format if necessary (currently supported: mp4|flv|ogg|webm|mkv|avi)]'
  '--postprocessor-args[give these arguments to the postprocessor]'
  {-k,--keep-video}'[keep the video file on disk after the post-processing; the video is erased by default]'
  '--no-post-overwrites[do not overwrite post-processed files; the post-processed files are overwritten by default]'
  '--embed-subs[embed subtitles in the video (only for mp4, webm and mkv videos)]'
  '--embed-thumbnail[embed thumbnail in the audio as cover art]'
  '--add-metadata[write metadata to the video file]'
  '--metadata-from-title[parse additional metadata like song title / artist from the video title. The format syntax is the same as --output.]'
  '--metadata-from-title[%(artist)s - %(title)s" matches a title like "Coldplay - Paradise". Example (regex): --metadata-]'
  '--xattrs[write metadata to the video files xattrs (using dublin core and xdg standards)]'
  '--fixup[automatically correct known faults of the file. One of never (do nothing), warn (only emit a warning), detect_or_warn (the]'
  '--prefer-avconv[prefer avconv over ffmpeg for running the postprocessors]'
  '--prefer-ffmpeg[prefer ffmpeg over avconv for running the postprocessors (default)]'
  '--ffmpeg-location[location of the ffmpeg/avconv binary; either the path to the binary or its containing directory.]'
  '--exec[execute a command on the file after downloading, similar to finds -exec syntax. Example: --exec adb push {}]'
  '--convert-subs[convert the subtitles to other format (currently supported: srt|ass|vtt|lrc)]'
  '*:filename:_files'
)

_arguments -s $arguments
